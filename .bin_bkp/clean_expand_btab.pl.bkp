#! /usr/bin/perl -w

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell
BEGIN{foreach (@INC) {s/\/usr\/local\/packages/\/local\/platform/}};

=head1 NAME

   expand_uniref100P_btab.pl 

=head1 SYNOPSIS

    USAGE: expand_uniref100P_btab.pl --input filename.btab --ouput outputfile.modified.btab
                
=head1 OPTIONS
   
B<--input,-i>
   Input file name
   
B<--help,-h>
   This help message


=head1  DESCRIPTION

    Expand UNIREF100P btab blast output with KEGG, COG, SEED and ACLAME
    results.

   
=head1  INPUT

    The input is defined with --input.  Input must be a btab blast output
    --output is the full path to output file
    
    Input is expected to have 21 fields and output of blast2btab
    
    1   query_name
    2   date
    3   query_length
    4   algorithm
    5   database_name
    6   hit_name
    7   qry_start
    8   qry_end
    9   hit_start
    10  hit_end
    11  percent_identity
    12  percent_similarity
    13  raw_score
    14  bit_score
    15  NULL
    16  hit_description
    17  blast_frame
    18  qry_strand (Plus | Minus)
    19  hit_length
    20  e_value
    21  p_value

=head1  OUTPUT
   
   Expanded btab blast output with KEGG, COG, SEED and ACLAME results.

    1   query_name
    2   query_length
    3   algorithm
    4   database_name
    5   hit_name
    6   qry_start
    7   qry_end
    8   hit_start
    9   hit_end
    10  percent_identity
    11  percent_similarity
    12  raw_score
    13  bit_score
    14  hit_description
    15  blast_frame
    16  qry_strand (Plus | Minus)
    17  hit_length
    18  e_value
    
    if UNIRE100P blast values append taxonomy data.
    
    19  domain
    20  kingdom
    21  phylum
    22  class
    23  order
    24  family
    25  genus
    26  species
    27  organism

=head1  CONTACT

  Jaysheel D. Bhavsar @ bjaysheel[at]gmail[dot]com


==head1 EXAMPLE

  expand_uniref100P_btab.pl -i input_file_name

=cut


use strict;
use DBI;
use Pod::Usage;
use Getopt::Long qw(:config no_ignore_case no_auto_abbrev pass_through);
BEGIN {
  use Ergatis::Logger;
}

my %options = ();
my $results = GetOptions (\%options,
                          'input|i=s',
			  'env|e=s',
			  'output|o=s',
                          'help|h') || pod2usage();


my $logfile = $options{'log'} || Ergatis::Logger::get_default_logfilename();
my $logger = new Ergatis::Logger('LOG_FILE'=>$logfile,
                                  'LOG_LEVEL'=>$options{'debug'});
$logger = $logger->get_logger();

## display documentation
if( $options{'help'} ){
    pod2usage( {-exitval => 0, -verbose => 2, -output => \*STDERR} );
}
##############################################################################
#### DEFINE GLOBAL VAIRABLES.
##############################################################################
my $db_user;
my $db_pass;
my $db_name;
my $db_host;
my $v_host;
my $dbh;
my $dbh0;

## make sure everything passed was peachy
&check_parameters(\%options);
##############################################################################
open (BTAB, $options{input}) or die "Can not open file $options{input}\n";
open (OUT, ">$options{output}") or die "Can not open file to write $options{output}\n";

my @btabfile = <BTAB>;

my $prev = "";
my $curr = "";
my @seqarray = ();
my @unirefarray = ();
my @keggarray =();
my @cogarray = ();
my @aclamearray = ();
my @seedarray = ();

foreach my $btabline (@btabfile){
    #SPLIT THE BTAB LINE
    chomp $btabline;
    
    my @tmp = split(/\t/,$btabline);
    
    #remove date, p-value and null value from the original blast2btab output.
    #this will create an array of length 17 or 18 items instead of 21 items.
    my @arr = @tmp[0,2..13,15..19];
    
    #$btabline = '';
    $btabline = join("\t", @arr);
    
    if($arr[3] =~ /UNIREF100P/i){
	$curr = $arr[0];
	if($curr eq $prev){
	    push (@seqarray, $btabline);
	}
	else{
	    $prev = $curr;
	    &expand();
	    
	    #reset array after expansion for new set of seq.
	    @seqarray = ();
	    @unirefarray = ();
	    @keggarray = ();
	    @cogarray = ();
	    @seedarray = ();
	    @aclamearray = ();
	    
	    #insert the first new seq info.
	    push (@seqarray, $btabline);
	    
	}##END OF ELSE CONDITION
    } else {
	print OUT $btabline."\n";
    }
}##END OF BTAB file

#expand last set of sequences.
&expand();

close(OUT);
exit(0);

###############################################################################
####  SUBS
###############################################################################
sub check_parameters {
   my $options = shift;

   ## make sure sample_file and output_dir were passed
   unless ($options{input}) {
    $logger->logdie("No input defined, plesae read perldoc $0\n\n");
    exit(1);
   }
   
  if ($options{env} eq 'dbi'){
      $db_user = q|bhavsar|;
      $db_pass = q|P3^seus|;
      $db_name = q|VIROME|;
      $db_host = $options{server}.q|.dbi.udel.edu|;
      $v_host = q|virome.dbi.udel.edu|;
  }elsif ($options{env} eq 'igs'){
      $db_user = q|jbhavsar|;
      $db_pass = q|jbhavsar58|;
      $db_name = q|virome_processing|;
      $db_host = q|hannibal.igs.umaryland.edu|;
      $v_host = q|hannibal.igs.umaryland.edu|;
  }elsif ($options{env} eq 'ageek') {
      $db_user = q|bhavsar|;
      $db_pass = q|Application99|;
      $db_name = $options{server};
      $db_host = q|10.254.0.1|;
      $v_host = q|10.254.0.1|;
  }else {
      $db_user = q|kingquattro|;
      $db_pass = q|Un!c0rn|;
      $db_name = q|VIROME|;
      $db_host = q|localhost|;
      $v_host = q|localhost|;
  }
}

##############################################################################
sub expand {
  $dbh = DBI->connect("DBI:mysql:database=$db_name;host=$db_host",
      "$db_user", "$db_pass",{PrintError=>1, RaiseError =>1, AutoCommit =>1});

  $dbh0 = DBI->connect("DBI:mysql:database=uniref_lookup2;host=$v_host",
      "$db_user", "$db_pass",{PrintError=>1, RaiseError =>1, AutoCommit =>1});
  
  my $uniref_lookup = $dbh0->prepare(qq{SELECT u.desc,  u.organism, u.kegg_acc, u.cog_acc, u.seed_acc, u.aclame_acc,
					     t.domain, t.kingdom, t.phylum, t.n_class, t.n_order, t.family, t.genus, t.species
				      FROM uniref u LEFT JOIN taxon t ON u.tax_id=t.tax_id
					WHERE u.acc = ? ORDER BY u.id ASC LIMIT 1});
  my $kegg_lookup = $dbh0->prepare(qq{SELECT k.desc FROM kegg k WHERE k.realacc=? ORDER BY k.id LIMIT 1});
  my $seed_lookup = $dbh0->prepare(qq{SELECT s.desc FROM seed s WHERE s.realacc=? ORDER BY s.id LIMIT 1});
  my $aclame_lookup = $dbh0->prepare(qq{SELECT a.desc FROM aclame a WHERE a.realacc=? ORDER BY a.id LIMIT 1});
  
    foreach my $seqline(@seqarray){
	chomp $seqline;
	
	#split blast output.
	my @arr1 = split(/[\t]/,$seqline);
	
	#get hit_name/accession.
	my $unirefId = $arr1[4];
	
	#get uniref lookup record
	$uniref_lookup->execute($unirefId);
	my $rslt = $uniref_lookup->fetchall_arrayref({});

	foreach my $row (@$rslt)
	{
	    #prepare taxonomy
	    my $taxonomy = $row->{domain}."\t".$row->{kingdom}."\t".$row->{phylum}."\t".
			   $row->{n_class}."\t".$row->{n_order}."\t".$row->{family}."\t".
			   $row->{genus}."\t".$row->{species}."\t".$row->{organism};
			    
	    #replace hit_description in arr_id 14 and then append taxonomy data.
	    $arr1[13] = &trim($row->{desc});
	    my $resultrow = join("\t",@arr1)."\t".$taxonomy."\n";
	    push (@unirefarray, $resultrow);

	    ## CHECK IF KEGGID IS NOT NULL
	    if(defined $row->{kegg_acc} && length($row->{kegg_acc}) > 1){
		#reset array.
		@arr1 = ();
		@arr1 = split(/[\t]/,$seqline);
		
		#split accession by ; if there are multiple acc's
		my @kegg_acc_arr = split(/;/,$row->{kegg_acc});
		
		$kegg_lookup->execute($kegg_acc_arr[0]);
		my $kegg_desc = $kegg_lookup->fetchrow_array();
		
		$arr1[3] = q|KEGG|; #replace database name
		$arr1[4] = $kegg_acc_arr[0]; #replace hit_name
		$arr1[13] = &trim($kegg_desc); #replace hit_description
		
		my $kegg_row = join("\t",@arr1)."\t".$taxonomy."\n";
		push(@keggarray, $kegg_row);
	    }

	    ## CHECK IF COGID IS NOT NULL
	    $resultrow = "";
	    if(defined $row->{cog_acc} && length($row->{cog_acc}) > 1){
		#reset array.
		@arr1 = ();
		@arr1 = split(/[\t]/,$seqline);
		
		#split accession by ; if there are multiple acc's
		my @cog_acc_arr = split(/;/,$row->{cog_acc});
		
		$arr1[3] = q|COG|; #replace database name
		$arr1[4] = $cog_acc_arr[0]; #replace hit_name,		
		#no desc in COG table use uniref description
		$arr1[13] = &trim($row->{desc});
		
		my $cog_row .= join("\t",@arr1)."\t".$taxonomy."\n";
		push(@cogarray, $cog_row);
	    }

	    ## CHECK IF SEED IS NOT NULL
	    if(defined $row->{seed_acc} && length($row->{seed_acc}) > 1){
		#reset array.
		@arr1 = ();
		@arr1 = split(/[\t]/,$seqline);
		
		#split accession by ; if there are multiple acc's
		my @seed_acc_arr = split(/;/,$row->{seed_acc});
		
		$seed_lookup->execute($seed_acc_arr[0]);
		my $seed_desc = $seed_lookup->fetchrow_array();
		
		$arr1[3] = q|SEED|; #replace database name
		$arr1[4] = $seed_acc_arr[0]; #replace hit_name
		$arr1[13] = &trim($seed_desc); #replace hit_description
		
		my $seed_row .= join("\t",@arr1)."\t".$taxonomy."\n";
		push(@seedarray, $seed_row);
	    }

	    ## CHECK IF ACLAME IS NOT NULL
	    if(defined $row->{aclame_acc} && length($row->{aclame_acc}) > 1){
		#reset array.
		@arr1 = ();
		@arr1 = split(/[\t]/,$seqline);
		
		#split accession by ; if there are multiple acc's
		my @aclame_acc_arr = split(/;/,$row->{aclame_acc});
		
		$aclame_lookup->execute($aclame_acc_arr[0]);
		my $aclame_desc = $aclame_lookup->fetchrow_array();
  
		$arr1[3] = q|ACLAME|; #replace database name
		$arr1[4] = $aclame_acc_arr[0]; #replace hit_name
		$arr1[13] = &trim($aclame_desc); #replace hit_description
		
		my $aclame_row = join("\t",@arr1)."\t".$taxonomy."\n";
		push(@seedarray, $aclame_row);
	    }	
	}##END uniref lookup.	 
	$uniref_lookup->finish();	
    }##END OF ITERATING THROUGH ALL UNIREF RECORDS FOR A ACCESSION
    
    ##PRINT UNIREF FIRST
    foreach my $unirefline(@unirefarray){
	print OUT $unirefline;
    }
    ##PRINT KEGG
    foreach my $keggline(@keggarray){
	print OUT $keggline;
    }
    foreach my $cogline(@cogarray){
	print OUT $cogline;
    }
    foreach my $seedline(@seedarray){
	print OUT $seedline;
    }
    foreach my $aclameline(@aclamearray){
	print OUT $aclameline;
    }
    
  $dbh->disconnect;
  $dbh0->disconnect;
}

sub trim($) {
  my $string = shift;
  $string =~ s/^\s+//;
  $string =~ s/\s+$//;
  $string =~ s/^\t+//;
  $string =~ s/\t$//;
  return $string;
}