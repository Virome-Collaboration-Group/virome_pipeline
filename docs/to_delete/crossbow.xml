<?xml version="1.0" encoding="UTF-8"?>
<commandSetRoot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation='commandSet.xsd'>
    <commandSet type="serial">
        <state>incomplete</state>
        <name>Crossbow workflow</name>
        <!--Preprocessing-->
        <command>
            <type>RunUnixCommand</type>
            <name>create output directory</name>
            <state>incomplete</state>
            <executable>mkdir</executable>
            <arg>-p -m 777 $;OUTPUT_DIRECTORY$;</arg>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>create temp directory</name>
            <state>incomplete</state>
            <executable>mkdir</executable>
            <arg>-p -m 777 $;TMP_DIR$;</arg>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>create local index directory</name>
            <state>incomplete</state>
            <executable>mkdir</executable>
            <arg>-p -m 777 $;TMP_DIR$;/index</arg>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>create $;HADOOP_EXEC$; index directory</name>
            <state>incomplete</state>
            <executable>$;HADOOP_EXEC$;</executable>
            <arg>fs -mkdir /users/clovr/$;PIPELINEID$;/index</arg>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>create $;HADOOP_EXEC$; reads directory</name>
            <state>incomplete</state>
            <executable>$;HADOOP_EXEC$;</executable>
            <arg>fs -mkdir /users/clovr/$;PIPELINEID$;/reads</arg>
        </command>
        <!--Processing-->
        <command>
            <type>RunUnixCommand</type>
            <name>create index from reference genome</name>
            <state>incomplete</state>
            <executable>$;BIN_DIR$;/process_crossbow_reference_genome</executable>
            <param>  
                <key>stdout</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_process_ref_genome.stdout</value>
            </param>
            <param>  
                <key>stderr</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_process_ref_genome.stderr</value>
            </param>
            <param>  
                <key>--bowtie_build_exec</key>
                <value>/opt/bowtie/bowtie-build</value>
            </param>
            <param>  
                <key>--reference_genomes</key>
                <value>$;REFERENCE_GENOMES$;</value>
            </param>
            <param>  
                <key>--output_dir</key>
                <value>$;TMP_DIR$;/index</value>
            </param>
            <param>  
                <key>--log</key>
                <value>$;TMP_DIR$;/process_crossbow_reference_genome.pl.log</value>
            </param>
            <param>  
                <key>--debug</key>
                <value>ALL</value>
            </param>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>place index files on $;HADOOP_EXEC$; fs</name>
            <state>incomplete</state>
            <executable>$;HADOOP_EXEC$;</executable>
            <arg>fs -put $;TMP_DIR$;/index/* /users/clovr/$;PIPELINEID$;/index/</arg>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>process input read files</name>
            <state>incomplete</state>
            <executable>$;BIN_DIR$;/process_crossbow_input</executable>
            <param>  
                <key>stdout</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_process_read_files.stdout</value>
            </param>
            <param>  
                <key>stderr</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_process_read_files.stderr</value>
            </param>
            <param>  
                <key>--project_name</key>
                <value>$;PIPELINEID$;</value>
            </param>
            <param>  
                <key>--input_file</key>
                <value>$;INPUT_FILE$;</value>
            </param>
            <param>  
                <key>--output_file</key>
                <value>$;CROSSBOW_MANIFEST$;</value>
            </param>
            <param>  
                <key>--log</key>
                <value>$;TMP_DIR$;/process_read_files.pl.log</value>
            </param>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>crossbow preprocess reads</name>
            <state>incomplete</state>
            <executable>$;CROSSBOW_EXEC$;</executable>
            <arg>-pre -readlist $;CROSSBOW_MANIFEST$; $;PIPELINEID$;</arg>
            <param>  
                <key>stdout</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_preprocess.stdout</value>
            </param>
            <param>  
                <key>stderr</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_preprocess.stderr</value>
            </param>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>crossbow run bowtie</name>
            <state>incomplete</state>
            <executable>$;CROSSBOW_EXEC$;</executable>
            <arg>-bowtie $;PIPELINEID$;</arg>
            <param>  
                <key>stdout</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_bowtie.stdout</value>
            </param>
            <param>  
                <key>stderr</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_bowtie.stderr</value>
            </param>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>crossbow SoapSNP</name>
            <state>incomplete</state>
            <executable>$;CROSSBOW_EXEC$;</executable>
            <arg>-output_dir $;OUTPUT_DIRECTORY$; -snp -fetchsnps $;PIPELINEID$;</arg>
            <param>  
                <key>stdout</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_soapsnps.stdout</value>
            </param>
            <param>  
                <key>stderr</key>
                <value>$;OUTPUT_DIRECTORY$;/$;COMPONENT_NAME$;_soapsnps.stderr</value>
            </param>
        </command>
        <!--Postprocessing-->
        <command>
            <type>RunUnixCommand</type>
            <name>rename snps output file</name>
            <state>incomplete</state>
            <executable>mv</executable>
            <arg>$;OUTPUT_DIRECTORY$;/$;PIPELINEID$;.snps $;OUTPUT_DIRECTORY$;/$;PROJECT_LABEL$;.snps</arg>
        </command>
        <command>
            <type>RunUnixCommand</type>
            <name>create snps list</name>
            <state>incomplete</state>
            <executable>$;BIN_DIR$;/create_list_file</executable>
            <param>  
                <key>--directory</key>
                <value>$;OUTPUT_DIRECTORY$;</value>
            </param>
            <param>  
                <key>--regex</key>
                <value>".*\.snps"</value>
            </param>
            <param>  
                <key>--output_list</key>
                <value>$;SNPS_OUTPUT_LIST$;</value>
            </param>
        </command>
    </commandSet>
</commandSetRoot>
