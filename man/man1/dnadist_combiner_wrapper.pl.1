.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DNADIST_COMBINER_WRAPPER 1"
.TH DNADIST_COMBINER_WRAPPER 1 "2010-10-22" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
dnadist_combiner_wrapper.pl \- Wrapper for dnadist_combiner executable in a parallel version of dnadist.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
dnadist_combiner_wrapper.pl
         \-\-dnadist_combiner_path=/path/to/dnadist_combiner
         \-\-control_file=/path/to/dnadist_control_file
         \-\-sorted_worker_output=/path/to/partial_output.dnadist
         \-\-output_file=/path/to/output.txt
        [\-\-log=/path/to/some.log
         \-\-debug=4 ]
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-dnadist_combiner_path,\-w\fR
    path to the dnadist_combiner executable.
.PP
\&\fB\-\-control_file,\-c\fR
    path to the dnadist control file.  see the dnadist documentation for details (this
    file is essentially a set of keyboard commands that gets piped into dnadist's 
    interactive menu interface)
.PP
\&\fB\-\-sorted_worker_output,\-s\fR
    path to the sorted, concatenated output from all of the distributed dnadist_worker
    processes.  dnadist_combiner will fail if this output is not complete or does not
    match the input file passed in the \-\-control_file
.PP
\&\fB\-\-output_file,\-o\fR
    path to the file in which to store the final dnadist output.
.PP
\&\fB\-\-log,\-l\fR 
    optional.  path to a log file the script should create.  will be overwritten if
    already exists.
.PP
\&\fB\-\-debug,\-d\fR 
    optional.  the debug level for the logger (an integer)
.PP
\&\fB\-\-help,\-h\fR 
    This help message/documentation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Wrapper for dnadist_combiner executable in a parallel version of dnadist.
.SH "INPUT"
.IX Header "INPUT"
The input to this wrapper consists of the input to the original dnadist
program, specified by the \-\-control_file, plus the tab-delimited data
produced by the dnadist_worker processes.  Each line of this output will
have two columns separated by a space, e.g.
.PP
1 0.244838
2 0.056921
3 0.647833
4 0.234556
.PP
This file contains the sorted concatenated output from all of the distributed
dnadist_worker jobs.
.SH "OUTPUT"
.IX Header "OUTPUT"
The output of the wrapper is the output of dnadist, namely a distance matrix
whose format is specified by the \-\-control_file.
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Jonathan Crabtree
\&    jonathancrabtree@gmail.com
.Ve
