.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GLIMMER32BSML 1"
.TH GLIMMER32BSML 1 "2010-10-22" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
glimmer32bsml.pl \- Creates a bsml document from glimmer3 raw
    output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0 glimmer32bsml.pl
            \-\-input_list=/path/to/some/glimmer3.raw.list
            \-\-input_file=/path/to/some/glimmer3.raw
            \-\-output=/path/to/transterm.bsml
            \-\-id_repository=/path/to/id_repository
            \-\-fasta_input=/path/to/glimmer3/input.fsa
          [ \-\-log=/path/to/file.log
            \-\-debug=4
            \-\-help
          ]
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-input_list,\-i\fR
    Input list of glimmer3 raw output files (.predict)
.PP
\&\fB\-\-input_file,\-f\fR
    Input glimmer3 raw file (.predict)
.PP
\&\fB\-\-output,\-o\fR
    The output bsml file.
.PP
\&\fB\-\-id_repository,\-r\fR
    Id repository for use by Workflow::IdGenerator.pm
.PP
\&\fB\-\-fasta_input,\-a\fR
    The input file that was used as input for the glimmer3 run
.PP
\&\fB\-\-log,\-l\fR
    Logfile.
.PP
\&\fB\-\-help,\-h\fR
    Print this message
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to convert the output from a glimmer3 search into \s-1BSML\s0.
.SH "INPUT"
.IX Header "INPUT"
You define the input file using the \-\-input option.  This file does not need any
special file extension.  The regular output of glimmer3 looks like this:
.PP
>zma1.assembly.5808
orf00001   319296      174  +1     3.95
orf00002      430      969  +1     3.91
orf00003     1197     1051  \-1    12.79
orf00004     1258     1368  +1     6.95
orf00005     1541     1681  +2     8.58
orf00007     1889     1755  \-3    11.14
orf00008     2014     1874  \-2     0.37
orf00009     2153     2359  +2    48.95
.PP
Where the columns from left to right contain:
orf_id   start_position   end_position   reading_frame   \*(L"raw\*(R"_score
.PP
A few things to note:
\&\- glimmer3 will find genes spanning the end/beginning of the given sequence, as
if dealing with a circular molecule (unless given the \-l or \-\-linear option).  These
are dealt with in bsml by converting the start_pos into a coordinate to the left of
the origin (a negative number).
\&\- The raw_score in the .predict file may be different than that found in the 
\&.details file, due to adjustments made for the \s-1PWM\s0 and start codon frequency.
This value from the .predict file can therefore be used to make direct comp\-
arisons between predictions.
\&\- The ranges given by glimmer3 differ from those given by glimmer2 because they now
include the stop codon.
.SH "OUTPUT"
.IX Header "OUTPUT"
After parsing the input file, a file specified by the \-\-output option is created.  This script
will fail if it already exists.  The file is created, and temporary IDs are created for
each result element.  They are only unique to the document, and will need to be replaced
before any database insertion.
.PP
Base positions from the input file are renumbered so that positions start at zero.
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Kevin Galens
\&    kgalens@tigr.org
.Ve
