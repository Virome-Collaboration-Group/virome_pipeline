.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TRNASCAN-SE2BSML 1"
.TH TRNASCAN-SE2BSML 1 "2010-10-22" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
tRNAscan\-SE2bsml.pl \- convert tRNAcan\-SE output to BSML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1USAGE:\s0 tRNAscan\-SE2bsml.pl 
        \-\-input=/path/to/tRNAscanfile 
        \-\-output=/path/to/output.bsml
        \-\-fasta_input=/path/to/fastafile
        \-\-id_repository=/path/to/id_repository
        \-\-project=aa1 
        [ \-\-gzip_output=1       
          \-\-log=/path/to/logfile 
          \-\-debug=3
        ]
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-\-input,\-i\fR 
    Input file file from a tRNAscan-SE search.
.PP
\&\fB\-\-output,\-o\fR 
    Output \s-1BSML\s0 file (will be created, must not exist)
.PP
\&\fB\-\-fasta_input,\-a\fR
    The input file that was used as input for the tRNAscan-SE run
.PP
\&\fB\-\-id_repository,\-r\fR
    Path to the project's id repository
.PP
\&\fB\-\-gzip_output,\-g\fR
    Optional. A non-zero value will make compressed output.
.PP
\&\fB\-\-debug,\-d\fR 
    Debug level.  Use a large number to turn on verbose debugging. 
.PP
\&\fB\-\-project,\-p\fR 
    Required. Project \s-1ID\s0.  Used in creating feature ids. 
    If 'aa1' is passed, repeat feature IDs created are like aa1.repeat_region.4231.1
    If 'parse' is passed, will parse from already present ids.
.PP
\&\fB\-\-log,\-l\fR 
    Log file
.PP
\&\fB\-\-help,\-h\fR 
    This help message
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to convert the output from a tRNAscan-SE search into \s-1BSML\s0.
.SH "INPUT"
.IX Header "INPUT"
tRNAscan-SE can be run using multiple input sequences simultaneously, and this
script supports parsing single or multiple input result sets.  Usual tRNAscan-SE
output looks like:
.PP
.Vb 8
\&    Sequence                tRNA            Bounds          tRNA    Anti    Intron Bounds   Cove
\&    Name            tRNA #  Begin           End             Type    Codon   Begin   End     Score
\&    --------        ------  ----            ------          ----    -----   -----   ----    ------
\&    51595           1       101064          101137          Asn     GTT     0       0       82.29
\&    51595           2       705796          705868          Ala     AGC     0       0       68.12
\&    ...
\&    51595           13      3488675         3488743         Pseudo  GTA     0       0       22.49
\&    51595           14      3493468         3493555         Ser     GCT     3493506 3493513 40.19
.Ve
.PP
You can elimate the headers in the original tRNAscan-SE output file by running 
tRNAscan-SE using the \-b option.  If they are present, they should be ignored by 
this script.
.PP
You define the input file using the \-\-input option.  This file does not need any
special file extension.
.SH "OUTPUT"
.IX Header "OUTPUT"
After parsing the input file, a file specified by the \-\-output option is created.  This script
will fail if it already exists.  The file is created, and temporary IDs are created for
each result element.  They are only unique to the document, and will need to be replaced
before any database insertion.
.PP
Base positions from the input file are renumbered so that positions start at zero.  The
current output elements from tRNAscan-SE that are not represented in the \s-1BSML\s0 file are:
.PP
.Vb 3
\&    tRNA type
\&    Anti Codon
\&    Cove Score
.Ve
.PP
These need to be included later.
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 2
\&    Jason Inman
\&    jinman@tigr.org
.Ve
